// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wizzarts.Data;

#nullable disable

namespace Wizzarts.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250221165039_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AdminFeedBack")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Admin might want to remind client about name policies, missing profile details, missing avatar...");

                    b.Property<int?>("AvatarId")
                        .HasColumnType("int")
                        .HasComment("Avatar Identifier.Picked after signing in");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Avatar remote URL.Picked after signing in");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Information about the artist");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBeenUpdated")
                        .HasColumnType("bit")
                        .HasComment("Customer acknowledged admin request and fulfilled it");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("RequestFeedback")
                        .HasColumnType("bit")
                        .HasComment("Admin Request notification");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Art", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddedByMemberId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("New art piece  has been approved or not");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Art Description");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Image extension");

                    b.Property<bool>("ForMainPage")
                        .HasColumnType("bit")
                        .HasComment("Premium account only");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Art url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Art Title");

                    b.HasKey("Id");

                    b.HasIndex("AddedByMemberId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Arts");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is Article approved by Admin.");

                    b.Property<string>("ArticleCreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Article creator identifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Article description");

                    b.Property<bool>("ForMainPage")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Article image URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Article short description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Article title");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCreatorId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Avatar Remote URL. Seeded.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Avatar Name. Seeded.");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByMemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByMemberId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreId");

                    b.ToTable("CardDecks");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardGameExpansion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardsCount")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Number of cards by expansion. Seeded");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Card game expansion description. Seeded");

                    b.Property<string>("ExpansionSymbolUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Card game expansion symbol. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Card game expansion title.Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CardGameExpansions");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PlayCardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderId");

                    b.HasIndex("PlayCardId");

                    b.ToTable("CardOrders");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RelationKey")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ChatUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChatUsers");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CommentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardFlavor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Card Description");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Review of which card?");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Card title");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdminComment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("CardReview");

                    b.Property<string>("Suggestions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("What can be done to resolve the issue.");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PostedByUserId");

                    b.ToTable("CardComments");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.DeckOfCards", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeckId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayCardId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PlayCardId");

                    b.ToTable("DeckOfCards");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.DeckStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("DeckStatuses");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Action name");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is event approved by admin.");

                    b.Property<string>("ControllerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Controller name");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int")
                        .HasComment("Event creator");

                    b.Property<string>("EventCreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Event creator");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Event Description");

                    b.Property<int>("EventStatusId")
                        .HasColumnType("int")
                        .HasComment("Event status");

                    b.Property<bool>("ForMainPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Event image url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Event Title");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("EventCreatorId");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Action name");

                    b.Property<string>("ControllerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Controller name");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description");

                    b.Property<int>("EventCategoryId")
                        .HasColumnType("int")
                        .HasComment("Component type according to event type");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Image");

                    b.Property<string>("Instructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Instructions");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Title");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("EventId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EventComponents");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Event status.Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EventStatuses");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ManaCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana color type.");

                    b.Property<int>("Cost")
                        .HasColumnType("int")
                        .HasComment("Play Card Total Cost");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana remote image url.");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ManaCosts");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ManaInCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana color type.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ManaCostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemoteImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mana remote image url.");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ManaCostId");

                    b.ToTable("ManaInCard");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<string>("DeckImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("RecipientId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AbilitiesAndFlavor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("Card use requirements and effects. Card power description.");

                    b.Property<string>("AddedByMemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Has this card been approved by admin.");

                    b.Property<string>("ArtId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CardFrameColorId")
                        .HasColumnType("int")
                        .HasComment("Frame color Id. There is a default value.");

                    b.Property<int>("CardGameExpansionId")
                        .HasColumnType("int")
                        .HasComment("This card is part of which expansion.");

                    b.Property<string>("CardRemoteUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Image of the card saved locally upon creation.");

                    b.Property<int?>("CardTypeId")
                        .HasColumnType("int")
                        .HasComment("Card type identifier.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("ForMainPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEventCard")
                        .HasColumnType("bit")
                        .HasComment("Has this card been created during an event?");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("PlayCard name");

                    b.Property<string>("Power")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Card will deal damage equal to power.");

                    b.Property<string>("Toughness")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasComment("Card can take damage up to amount equal to its toughness.");

                    b.HasKey("Id");

                    b.HasIndex("AddedByMemberId");

                    b.HasIndex("ArtId")
                        .IsUnique()
                        .HasFilter("[ArtId] IS NOT NULL");

                    b.HasIndex("CardFrameColorId");

                    b.HasIndex("CardGameExpansionId");

                    b.HasIndex("CardTypeId");

                    b.HasIndex("EventId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PlayCards");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCardFrameColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Remote Image. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Play Card Frame color. Seeded");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PlayCardFrameColors");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Card type is.");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("PlayCardTypes");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Store location");

                    b.Property<bool>("ApprovedByAdmin")
                        .HasColumnType("bit")
                        .HasComment("Store approved by Admin.");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Store location");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Store location");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Store image Url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("Store name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Store phone");

                    b.Property<string>("StoreOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StoreOwnerId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.TagHelpAction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("TagHelpActions");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.TagHelpController", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("TagHelpControllers");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedByMemberId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Vote casted by.");

                    b.Property<string>("CardId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Vote added to.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Value")
                        .HasColumnType("tinyint")
                        .HasComment("Vote value");

                    b.HasKey("Id");

                    b.HasIndex("AddedByMemberId");

                    b.HasIndex("CardId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsCardGame", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardGameRulesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("WizzartsCardGame");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsGameRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttackingAndBlocking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BattleFieldIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BattleFieldSetUp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeginningPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNameReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNameUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPowToughUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPowerToughnessReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardReadingIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTextBoxReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTextBoxUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardTypeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CastingSpells")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CombatPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreaturesInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndingPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstMainPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameActions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GameRulesIntroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraveyardInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HandInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LandsInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryInBattle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManaCostReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManaCostUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Outro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutroUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartsOfTheTurn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublishedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondMainPhase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetSymbolReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetSymbolUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TappingUntapping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WizzartsCardGameId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WizzartsCardGameId")
                        .IsUnique()
                        .HasFilter("[WizzartsCardGameId] IS NOT NULL");

                    b.ToTable("WizzartsGameRules");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsGameRulesData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component description. Seeded");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component image url. Seeded");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Game rule component title. Seeded");

                    b.Property<string>("WizzartsCardGameId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WizzartsCardGameId");

                    b.ToTable("WizzartsGameRulesData");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasComment("Avatar remote URL.Picked after signing in");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Information about the artist");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nickname")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Wizzarts Team user id");

                    b.Property<string>("WizzartsCardGameId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("WizzartsCardGameId");

                    b.ToTable("WizzartsTeamMembers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.Avatar", "Avatar")
                        .WithMany("Members")
                        .HasForeignKey("AvatarId");

                    b.HasOne("Wizzarts.Data.Models.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Avatar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Art", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "AddedByMember")
                        .WithMany("Art")
                        .HasForeignKey("AddedByMemberId");

                    b.Navigation("AddedByMember");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Article", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "ArticleCreator")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleCreator");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardDeck", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "CreatedByMember")
                        .WithMany("CardDecks")
                        .HasForeignKey("CreatedByMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.DeckStatus", "Status")
                        .WithMany("Decks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("CreatedByMember");

                    b.Navigation("Status");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardOrder", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.PlayCard", "PlayCard")
                        .WithMany()
                        .HasForeignKey("PlayCardId");

                    b.Navigation("Order");

                    b.Navigation("PlayCard");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ChatMessage", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ChatUser", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.Chat", "Chat")
                        .WithMany("Users")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CommentCard", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.PlayCard", "Card")
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "PostedByUser")
                        .WithMany("Comments")
                        .HasForeignKey("PostedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.DeckOfCards", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.CardDeck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.PlayCard", "PlayCard")
                        .WithMany()
                        .HasForeignKey("PlayCardId");

                    b.Navigation("Deck");

                    b.Navigation("PlayCard");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Event", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.TagHelpAction", "ActionName")
                        .WithMany("Events")
                        .HasForeignKey("ActionId");

                    b.HasOne("Wizzarts.Data.Models.TagHelpController", "ControllerName")
                        .WithMany("Events")
                        .HasForeignKey("ControllerId");

                    b.HasOne("Wizzarts.Data.Models.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "EventCreator")
                        .WithMany("Events")
                        .HasForeignKey("EventCreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.EventStatus", "Status")
                        .WithMany("Events")
                        .HasForeignKey("EventStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionName");

                    b.Navigation("ControllerName");

                    b.Navigation("EventCategory");

                    b.Navigation("EventCreator");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventComponent", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.TagHelpAction", "ActionName")
                        .WithMany("EventComponents")
                        .HasForeignKey("ActionId");

                    b.HasOne("Wizzarts.Data.Models.TagHelpController", "ControllerName")
                        .WithMany("EventComponents")
                        .HasForeignKey("ControllerId");

                    b.HasOne("Wizzarts.Data.Models.Event", "Event")
                        .WithMany("EventComponents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionName");

                    b.Navigation("ControllerName");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ManaInCard", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.PlayCard", "Card")
                        .WithMany("CardMana")
                        .HasForeignKey("CardId");

                    b.HasOne("Wizzarts.Data.Models.ManaCost", "ManaCost")
                        .WithMany()
                        .HasForeignKey("ManaCostId");

                    b.Navigation("Card");

                    b.Navigation("ManaCost");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Order", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("DeckOrders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "Recipient")
                        .WithMany("Orders")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCard", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "AddedByMember")
                        .WithMany("Cards")
                        .HasForeignKey("AddedByMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.Art", "Art")
                        .WithOne()
                        .HasForeignKey("Wizzarts.Data.Models.PlayCard", "ArtId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Wizzarts.Data.Models.PlayCardFrameColor", "CardFrameColor")
                        .WithMany("Cards")
                        .HasForeignKey("CardFrameColorId");

                    b.HasOne("Wizzarts.Data.Models.CardGameExpansion", "CardGameExpansion")
                        .WithMany("Cards")
                        .HasForeignKey("CardGameExpansionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Wizzarts.Data.Models.PlayCardType", "CardType")
                        .WithMany("Cards")
                        .HasForeignKey("CardTypeId");

                    b.HasOne("Wizzarts.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("AddedByMember");

                    b.Navigation("Art");

                    b.Navigation("CardFrameColor");

                    b.Navigation("CardGameExpansion");

                    b.Navigation("CardType");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Store", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "StoreOwner")
                        .WithMany("Stores")
                        .HasForeignKey("StoreOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StoreOwner");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Vote", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "AddedByMember")
                        .WithMany("Votes")
                        .HasForeignKey("AddedByMemberId");

                    b.HasOne("Wizzarts.Data.Models.PlayCard", "Card")
                        .WithMany("Votes")
                        .HasForeignKey("CardId");

                    b.Navigation("AddedByMember");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsGameRules", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.WizzartsCardGame", "WizzartsCardGame")
                        .WithOne("CardGameRules")
                        .HasForeignKey("Wizzarts.Data.Models.WizzartsGameRules", "WizzartsCardGameId");

                    b.Navigation("WizzartsCardGame");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsGameRulesData", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.WizzartsCardGame", "WizzartsCardGame")
                        .WithMany("GameRulesData")
                        .HasForeignKey("WizzartsCardGameId");

                    b.Navigation("WizzartsCardGame");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsTeam", b =>
                {
                    b.HasOne("Wizzarts.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Wizzarts.Data.Models.WizzartsCardGame", "WizzartsCardGame")
                        .WithMany("WizzartsTeamMembers")
                        .HasForeignKey("WizzartsCardGameId");

                    b.Navigation("User");

                    b.Navigation("WizzartsCardGame");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Art");

                    b.Navigation("Articles");

                    b.Navigation("CardDecks");

                    b.Navigation("Cards");

                    b.Navigation("Chats");

                    b.Navigation("Claims");

                    b.Navigation("Comments");

                    b.Navigation("Events");

                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Roles");

                    b.Navigation("Stores");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Avatar", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.CardGameExpansion", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.DeckStatus", b =>
                {
                    b.Navigation("Decks");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.Event", b =>
                {
                    b.Navigation("EventComponents");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.EventStatus", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.OrderStatus", b =>
                {
                    b.Navigation("DeckOrders");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCard", b =>
                {
                    b.Navigation("CardMana");

                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCardFrameColor", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.PlayCardType", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.TagHelpAction", b =>
                {
                    b.Navigation("EventComponents");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.TagHelpController", b =>
                {
                    b.Navigation("EventComponents");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Wizzarts.Data.Models.WizzartsCardGame", b =>
                {
                    b.Navigation("CardGameRules");

                    b.Navigation("GameRulesData");

                    b.Navigation("WizzartsTeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
